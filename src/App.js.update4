// Aggiungi questi import all'inizio del file
import DoEndDoForm from './components/forms/DoEndDoForm';
import WhileForm from './components/forms/WhileForm';
import UpdateForm from './components/forms/UpdateForm';
import InsertForm from './components/forms/InsertForm';
import ModifyForm from './components/forms/ModifyForm';
import DeleteForm from './components/forms/DeleteForm';
import FormForm from './components/forms/FormForm';
import SearchBar from './components/search/SearchBar';
import Breadcrumbs from './components/navigation/Breadcrumbs';
import ToastManager from './components/common/ToastManager';
import useToast from './hooks/useToast';
import useGenerationHistory from './hooks/useGenerationHistory';
import GenerationHistory from './components/history/GenerationHistory';
import Documentation from './components/help/Documentation';
import { FiCode, FiStar, FiClock, FiList, FiHelpCircle, FiSettings } from 'react-icons/fi';

// Aggiorna le opzioni per le tabs includendo Help e Cronologia
const tabOptions = [
  { id: 'standard', label: 'Standard', icon: <FiCode /> },
  { id: 'favorites', label: 'Preferiti', icon: <FiStar /> },
  { id: 'templates', label: 'Template', icon: <FiClock /> },
  { id: 'history', label: 'Cronologia', icon: <FiList /> },
  { id: 'help', label: 'Aiuto', icon: <FiHelpCircle /> },
  { id: 'settings', label: 'Impostazioni', icon: <FiSettings /> }
];

// Aggiungi questi hook all'interno del componente AppContent
const { toasts, removeToast, showSuccess, showError } = useToast();
const { 
  history, 
  addToHistory, 
  clearHistory,
  searchHistory
} = useGenerationHistory();

// Aggiorna la funzione handleGenerateCode per salvare nella cronologia
const handleGenerateCode = (constructType, formData) => {
  try {
    const code = generateCode(constructType, formData, {
      autoFormat: settings.autoFormat
    });
    
    if (code) {
      setGeneratedCode(code);
      
      // Aggiungi alla cronologia
      addToHistory({
        constructType,
        description: getConstructNameById(constructType),
        generatedCode: code,
        formData
      });
      
      showSuccess('Codice generato con successo!');
    }
  } catch (error) {
    showError(`Errore nella generazione del codice: ${error.message}`);
  }
};

// Aggiungi questa funzione per la gestione della cronologia
const handleSelectFromHistory = (historyItem) => {
  setSelectedConstructType(historyItem.constructType);
  setGeneratedCode(historyItem.generatedCode);
  
  // Se ci sono dati del form, caricali
  if (historyItem.formData) {
    updateFormState(historyItem.constructType, historyItem.formData);
  }
  
  // Torna alla tab standard
  setActiveTab('standard');
};

// Aggiorna renderTabContent per includere le nuove tabs
const renderTabContent = () => {
  switch (activeTab) {
    case 'favorites':
      return (
        <div>
          <h3>I tuoi costrutti preferiti</h3>
          {favorites.length > 0 ? (
            <FavoritesList>
              {favorites.map(fav => (
                <FavoriteItem key={fav.id} onClick={() => setSelectedConstructType(fav.id)}>
                  {fav.name}
                </FavoriteItem>
              ))}
            </FavoritesList>
          ) : (
            <p>Nessun costrutto preferito. Aggiungi dei costrutti ai preferiti!</p>
          )}
        </div>
      );
    case 'templates':
      return (
        <div>
          <h3>Template salvati</h3>
          <TemplatesPanel
            onSelectTemplate={(template) => {
              setSelectedConstructType(template.constructType);
              // Qui dovremmo anche caricare i dati del form specifico
              updateFormState(template.constructType, template.formData);
              setGeneratedCode(template.generatedCode || '');
              setActiveTab('standard');
            }}
          />
        </div>
      );
    case 'history':
      return (
        <div>
          <h3>Cronologia generazioni</h3>
          <GenerationHistory
            history={history}
            onSelect={handleSelectFromHistory}
            onClear={clearHistory}
            onCopy={(item) => {
              navigator.clipboard.writeText(item.generatedCode);
              showSuccess('Codice copiato negli appunti!');
            }}
          />
        </div>
      );
    case 'help':
      return <Documentation />;
    case 'settings':
      return (
        <SettingsPanel>
          <h3>Impostazioni</h3>
          <SettingItem>
            <input
              type="checkbox"
              id="autoFormat"
              checked={settings.autoFormat}
              onChange={() => updateSettings({ autoFormat: !settings.autoFormat })}
            />
            <label htmlFor="autoFormat">Formattazione automatica</label>
          </SettingItem>
          <SettingItem>
            <input
              type="checkbox"
              id="showLineNumbers"
              checked={settings.showLineNumbers}
              onChange={() => updateSettings({ showLineNumbers: !settings.showLineNumbers })}
            />
            <label htmlFor="showLineNumbers">Mostra numeri di riga</label>
          </SettingItem>
          <SettingItem>
            <input
              type="checkbox"
              id="syntaxHighlighting"
              checked={settings.syntaxHighlighting}
              onChange={() => updateSettings({ syntaxHighlighting: !settings.syntaxHighlighting })}
            />
            <label htmlFor="syntaxHighlighting">Evidenziazione sintassi</label>
          </SettingItem>
          <SettingItem>
            <span>Tema:</span>
            <select
              value={settings.theme}
              onChange={(e) => updateSettings({ theme: e.target.value })}
            >
              <option value="light">Chiaro</option>
              <option value="dark">Scuro</option>
            </select>
          </SettingItem>
        </SettingsPanel>
      );
    default:
      return (
        <div>
          <SelectContainer>
            <label htmlFor="constructType">Seleziona tipo di costrutto:</label>
            <div className="select-wrapper">
              <Select
                id="constructType"
                value={selectedConstructType}
                onChange={handleConstructTypeChange}
                options={constructOptions}
                placeholder="Seleziona tipo di costrutto"
              />
              <FavoriteButton
                variant="outline"
                size="small"
                onClick={() => {
                  const selectedConstruct = constructTypes.flatMap(group => group.items)
                    .find(item => item.id === selectedConstructType);
                  if (selectedConstruct) {
                    if (favorites.some(fav => fav.id === selectedConstruct.id)) {
                      removeFromFavorites(selectedConstruct.id);
                      showInfo('Rimosso dai preferiti');
                    } else {
                      addToFavorites(selectedConstruct);
                      showSuccess('Aggiunto ai preferiti');
                    }
                  }
                }}
              >
                {favorites.some(fav => fav.id === selectedConstructType) ? 'Rimuovi dai preferiti' : 'Aggiungi ai preferiti'}
              </FavoriteButton>
            </div>
          </SelectContainer>
          
          <Breadcrumbs 
            items={[
              { label: 'Home' },
              { label: getConstructGroupById(selectedConstructType) },
              { label: getConstructNameById(selectedConstructType) }
            ]}
          />
          
          <h3>{getConstructNameById(selectedConstructType)}</h3>
          {renderForm()}
        </div>
      );
  }
};

// Funzione helper per ottenere il gruppo di un costrutto
const getConstructGroupById = (id) => {
  for (const group of constructTypes) {
    if (group.items.some(item => item.id === id)) {
      return group.group;
    }
  }
  return 'Altro';
};

// Aggiorna il renderForm per supportare tutti i nuovi form
const renderForm = () => {
  switch (selectedConstructType) {
    case 'if-else':
      return <IfElseForm onGenerate={handleGenerateCode} />;
    case 'case':
      return <CaseForm onGenerate={handleGenerateCode} />;
    case 'loop-at':
      return <LoopAtForm onGenerate={handleGenerateCode} />;
    case 'select':
      return <SelectForm onGenerate={handleGenerateCode} />;
    case 'do-enddo':
      return <DoEndDoForm onGenerate={handleGenerateCode} />;
    case 'while':
      return <WhileForm onGenerate={handleGenerateCode} />;
    case 'update':
      return <UpdateForm onGenerate={handleGenerateCode} />;
    case 'insert':
      return <InsertForm onGenerate={handleGenerateCode} />;
    case 'modify':
      return <ModifyForm onGenerate={handleGenerateCode} />;
    case 'delete':
      return <DeleteForm onGenerate={handleGenerateCode} />;
    case 'form':
      return <FormForm onGenerate={handleGenerateCode} />;
    default:
      return <GenericForm constructType={selectedConstructType} onGenerate={handleGenerateCode} />;
  }
};

// Aggiungi il ToastManager nel return finale
return (
  <AppContainer>
    <Header />
    
    <MainContent>
      <OptionsPanel>
        <Tabs 
          tabs={tabOptions} 
          activeTab={activeTab} 
          onChange={setActiveTab} 
        />
        {renderTabContent()}
      </OptionsPanel>
      
      <OutputPanel>
        <CodePreview code={generatedCode} />
      </OutputPanel>
    </MainContent>
    
    <ToastManager toasts={toasts} onClose={removeToast} />
  </AppContainer>
);
