import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { tomorrow, prism } from 'react-syntax-highlighter/dist/esm/styles/prism';
import { FiCopy, FiDownload, FiSave, FiCheck } from 'react-icons/fi';
import Button from '../common/Button';
import { useAbap } from '../../context/AbapContext';

// Componente per visualizzare l'anteprima del codice generato
const CodePreview = ({ code }) => {
  const { settings, saveTemplate, selectedConstructType, formState } = useAbap();
  const [copied, setCopied] = useState(false);
  const [highlightedCode, setHighlightedCode] = useState(code);
  
  // Aggiorna il codice quando cambia
  useEffect(() => {
    setHighlightedCode(code);
  }, [code]);
  
  // Gestisce la copia negli appunti
  const handleCopy = () => {
    navigator.clipboard.writeText(code)
      .then(() => {
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
      })
      .catch(err => {
        console.error('Impossibile copiare il codice:', err);
      });
  };
  
  // Gestisce il download come file di testo
  const handleDownload = () => {
    const blob = new Blob([code], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'codice_abap.txt';
    a.click();
    URL.revokeObjectURL(url);
  };
  
  // Gestisce il salvataggio come template
  const handleSaveTemplate = () => {
    const name = prompt('Inserisci un nome per questo template:');
    if (name) {
      // Ottieni i dati del form per il tipo di costrutto selezionato
      const formData = formState[selectedConstructType] || {};
      
      // Salva il template con il codice generato
      saveTemplate(name, selectedConstructType, formData, code);
      
      // Mostra un messaggio di conferma
      alert(`Template "${name}" salvato con successo!`);
    }
  };
